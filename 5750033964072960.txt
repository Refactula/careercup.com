Matrix:
1 2
3 4

Paths:
1 3 4           d r
1 2 4           r d

Matrix:
1 2 3
4 5 6
7 8 9

Paths:
1 4 7 8 9       d d r r
1 4 5 8 9       d r d r
1 4 5 6 9       d r r d
1 2 5 8 9       r d d r
1 2 5 6 9       r d r d
1 2 3 6 9       r r d d

public class DownRightPathsPrinter {
    private final int[][] m;
    private final int width;
    private final int height;
    private final int[] buffer;

    public DownRightPathsPrinter(int[][] m, int width, int height) {
        this.m = m;
        this.width = width;
        this.height = height;
        this.buffer = new int[width + height - 1];
    }

    public void print() {
        printRecursively(0, 0, 0);
    }

    private void printRecursively(int i, int j, int bufferSize) {
        buffer[bufferSize++] = m[i][j];
        if (i == width - 1 && j == height - 1) {
            for (int k = 0; k < buffer.length; k++) {
                System.out.print(buffer[k]);
                if (k < buffer.length - 1) {
                    System.out.print(' ');
                } else {
                    System.out.println();
                }
            }
        } else {
            if (i + 1 < width) {
                printRecursively(i + 1, j, bufferSize);
            }
            if (j + 1 < height) {
                printRecursively(i, j + 1, bufferSize);
            }
        }
    }
}