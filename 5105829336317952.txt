1 2 1 3 4 5

1 2 1 - length 3
1 3 4 5 1 - length 5


                                         -
                 1                       -
                        2                -
         8                               -
                                         -
                           1             -
      6                                  -
                                         -
                                         -
         1              4                -
                                         -
                 5                       -
                                         -
                                         -

Clockwise:
1 2 3 4 5 1
1 6 8 1

Counter-clock wise:
1 8 6 1
1 5 4 3 2 1

1. Remember the first node of the linked list (to know when to stop).
2. Loop through all the nodes of the list until the next node is the first node.
3. Track the index of each visited element.
4. For each value of the node remember the list of its nodes indexes. (using a HashMap)
5. Find such two indexes the values that have  the longest length between them.

class Node {
    int value;
    Node next;
}

/**
 * Find the length of the longest sequence of values of a circular linked list that starts and ends on
 * nodes that have the same value. Sequences that contain at least one node several times are not taken into
 * account (sequences with loops that can be infinite in size).
 */
public static int longestSequenceLength(Node firstNode) {
    if (firstNode == null) {
        return 0; // Consider it as an empty sequence (NullPointerException is also a valid choice)
    }
    Set<Integer, List<Integer> valueIndexesMap = new HashSet<>();
    int index = 0;
    Node next = firstNode;
    do {
        int value = next.value;
        if (!valueIndexMap.containsKey(value)) {
            valueIndexesMap.put(value, new ArrayList<>());
        }
        valueIndexesMap.get(value).add(index);
        index++;
        next = next.next;
    } while (next != firstNode);
    int size = index;
    int longestSequenceLength = 1;
    for (List<Integer> indexes : valueIndexesMap.values()) {
        for (int i = 0; i < indexes.size(); i++) {
            int j = (i + 1) % indexes.size();
            int delta = indexes.get(j) - indexes.get(i);
            if (delta < 0) {
                delta += size;
            }
            int length = size - delta + 1;
            if (length > longestSequenceLength) {
                longestSequenceLength = length;
            }
        }
    }
    return longestSequenceLength;
}
Node: a  b  c  d  f  g
List: 1, 2, 1, 3, 4, 5
firstNode: a
valueIndexesMap: {
    1: 0, 2
    2: 1
    3: 3
    4: 4
    5: 5
}
next: a
value: 5
size: 6
longestSequenceLength: 5
indexes: 0, 2
indexes.size(): 2
i: 1
j: 0
delta: -2 + 6 = 4
length: 6 - 4 + 1 = 3

Test cases:
assert longestSequenceLength(mkCircularLinkedList(1, 2, 1, 3, 4, 5)) == 5
assert longestSequenceLength(mkCircularLinkedList(1, 3, 4, 5, 1, 2)) == 5
assert longestSequenceLength(mkCircularLinkedList(1, 2, 3)) == 1
assert longestSequenceLength(mkCircularLinkedList(5)) == 1
assert longestSequenceLength(mkCircularLinkedList()) == 1