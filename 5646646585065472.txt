Given an array, find the first element that appears an even number of times.

Questions to the interviewer:
1. What if there is no element that appear even number of times?
   Supposed answer: return null.
2. What data is in array? Is it numbers? Strings? Objects?
   Supposed answer: let's assume numbers.
3. Do I need to return the value of the element or the index of its first occurrence?
   Supposed answer: value is fine.
4. What is the range of the numbers? Is it limited by a small value?
   Supposed answer: the whole Integer range. (as the 32-bits type)
5. How large is the array? Can it fit into memory? How much additional space can I use?
   Supposed answer: the array can fit into memory.

in: 1 3 1
out: 1

in: 1 3 3 1
out: 1

in: 1 2 3 3
out: 3

in: 1
out: null

in:
out: null

Complexity:
    min: O(N) // N is the length of the array

Idea I
1. Count number of occurrences for each value of the array storing them in HashMap.
2. Create a HashSet of values that occur an event number of times.
3. Find the first element of the array that is in the Set from step 2 and return it.
Time: O(N)
Space: O(N)

Idea II
1. Sort the array using the Quicksort algorithm.
2. ?????? (we have lost the information about the order of elements)
Time: O(N log N)
Space: O(1)

Idea III
1. For each element of the array find its number of occurrences, returning the first one with the even number.
Time: O(N ^ 2)
Space: O(1)

public static Integer firstEvenlyOccurredElement(int[] a) {
    Map<Integer, Integer> occurrences = countNumberOfOccurrences(a);
    for (int i = 0; i < a.length; i++) {
        int value = a[i];
        if (occurrences.get(value) % 2 == 0) {
            return i;
        }
    }
    return null;
}

private static Map<Integer, Integer> countNumberOfOccurrences(int[] a) {
    Map<Integer, Integer> occurrences = new HashMap<>();
    for (int x : a) {
        if (occurrences.containsKey(x)) {
            int number = occurrences.get(x);
            occurrences.put(x, number + 1);
        } else {
            occurrences.put(x, 1);
        }
    }
    return occurrences;
}

Errors: index is returned instead of the value